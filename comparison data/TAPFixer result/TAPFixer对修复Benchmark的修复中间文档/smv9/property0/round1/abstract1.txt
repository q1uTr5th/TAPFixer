MODULE RUNIN(delay)
VAR
  timer:0..20;
ASSIGN
  init(timer):=0;
  next(timer):=
      case
        delay=0:0;
        timer=0 & delay>0: delay;
        timer>0 & delay>0: timer - 1;
        TRUE: timer;
      esac;

MODULE main
   VAR
     light.switch:{off,on};
     light.switch_last:{off,on};
     presenceSensor.presence:{not_present,present};
     presenceSensor.presence_last:{not_present,present};
     motionSensor.motion:{active,inactive};
     motionSensor.motion_last:{active,inactive};
     state.newEvent:boolean;
     state.newEvent_last:boolean;
     step:0..4;
     original_flag_rule0_state.newEvent_0:boolean;
     original_flag_rule0_state.newEvent_1:boolean;
     original_flag_rule0_presenceSensor.presence_0:boolean;
     original_flag_rule0_presenceSensor.presence_1:boolean;
     original_flag_rule1_motionSensor.motion_0:boolean;
     original_flag_rule1_motionSensor.motion_1:boolean;
     original_flag_rule1_state.newEvent_0:boolean;
     original_flag_rule1_state.newEvent_1:boolean;
     original_flag_rule2_state.newEvent_0:boolean;
     original_flag_rule2_state.newEvent_1:boolean;
     original_flag_rule2_presenceSensor.presence_0:boolean;
     original_flag_rule2_presenceSensor.presence_1:boolean;
     original_flag_rule3_motionSensor.motion_0:boolean;
     original_flag_rule3_motionSensor.motion_1:boolean;
     original_flag_rule3_presenceSensor.presence_0:boolean;
     original_flag_rule3_presenceSensor.presence_1:boolean;
   INVAR
     toint(original_flag_rule0_state.newEvent_0) + toint(original_flag_rule0_state.newEvent_1) < 2
   INVAR
     toint(original_flag_rule0_presenceSensor.presence_0) + toint(original_flag_rule0_presenceSensor.presence_1) < 2
   INVAR
     toint(original_flag_rule1_motionSensor.motion_0) + toint(original_flag_rule1_motionSensor.motion_1) < 2
   INVAR
     toint(original_flag_rule1_state.newEvent_0) + toint(original_flag_rule1_state.newEvent_1) < 2
   INVAR
     toint(original_flag_rule2_state.newEvent_0) + toint(original_flag_rule2_state.newEvent_1) < 2
   INVAR
     toint(original_flag_rule2_presenceSensor.presence_0) + toint(original_flag_rule2_presenceSensor.presence_1) < 2
   INVAR
     toint(original_flag_rule3_motionSensor.motion_0) + toint(original_flag_rule3_motionSensor.motion_1) < 2
   INVAR
     toint(original_flag_rule3_presenceSensor.presence_0) + toint(original_flag_rule3_presenceSensor.presence_1) < 2
   ASSIGN
    init(step) := 1;
    next(step) :=
        case
            step < 4 & step > 0: step + 1;
            step = 4: 0;
            TRUE: step;
    esac;


     init(presenceSensor.presence):=present;
     next(presenceSensor.presence):=
       case
         next(step) = 2: not_present;
         next(step) = 3: present;
         next(step) = 4: not_present;
         TRUE: {not_present,present};
       esac;

         init(motionSensor.motion) := inactive;
         init(state.newEvent) := FALSE;
      init(light.switch_last):=off;
      init(presenceSensor.presence_last):=not_present;

      next(light.switch_last):=light.switch;
      next(presenceSensor.presence_last):=presenceSensor.presence;
      next(motionSensor.motion_last):=motionSensor.motion;
      next(state.newEvent_last):=state.newEvent;

     next(motionSensor.motion):=
       case
         next(step) = 2: active;
         next(step) = 3: inactive;
         next(step) = 4: active;
         TRUE: motionSensor.motion;
       esac;


     next(state.newEvent):=
       case
         next(step) = 2: TRUE;
         next(step) = 3: TRUE;
         next(step) = 4: FALSE;
         TRUE: state.newEvent;
       esac;

      next(original_flag_rule0_state.newEvent_0) := original_flag_rule0_state.newEvent_0; 

      next(original_flag_rule0_state.newEvent_1) := original_flag_rule0_state.newEvent_1; 

      next(original_flag_rule0_presenceSensor.presence_0) := original_flag_rule0_presenceSensor.presence_0; 

      next(original_flag_rule0_presenceSensor.presence_1) := original_flag_rule0_presenceSensor.presence_1; 

      next(original_flag_rule1_motionSensor.motion_0) := original_flag_rule1_motionSensor.motion_0; 

      next(original_flag_rule1_motionSensor.motion_1) := original_flag_rule1_motionSensor.motion_1; 

      next(original_flag_rule1_state.newEvent_0) := original_flag_rule1_state.newEvent_0; 

      next(original_flag_rule1_state.newEvent_1) := original_flag_rule1_state.newEvent_1; 

      next(original_flag_rule2_state.newEvent_0) := original_flag_rule2_state.newEvent_0; 

      next(original_flag_rule2_state.newEvent_1) := original_flag_rule2_state.newEvent_1; 

      next(original_flag_rule2_presenceSensor.presence_0) := original_flag_rule2_presenceSensor.presence_0; 

      next(original_flag_rule2_presenceSensor.presence_1) := original_flag_rule2_presenceSensor.presence_1; 

      next(original_flag_rule3_motionSensor.motion_0) := original_flag_rule3_motionSensor.motion_0; 

      next(original_flag_rule3_motionSensor.motion_1) := original_flag_rule3_motionSensor.motion_1; 

      next(original_flag_rule3_presenceSensor.presence_0) := original_flag_rule3_presenceSensor.presence_0; 

      next(original_flag_rule3_presenceSensor.presence_1) := original_flag_rule3_presenceSensor.presence_1; 

    init(light.switch):=on;
    next(light.switch):=
          case
             motionSensor.motion=active&motionSensor.motion!=motionSensor.motion_last & ((original_flag_rule0_state.newEvent_0)->(state.newEvent = FALSE)) & ((original_flag_rule0_state.newEvent_1)->(state.newEvent = TRUE)) & ((original_flag_rule0_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule0_presenceSensor.presence_1)->(presenceSensor.presence = present)):off;
             presenceSensor.presence=not_present&presenceSensor.presence!=presenceSensor.presence_last & ((original_flag_rule1_motionSensor.motion_0)->(motionSensor.motion = active)) & ((original_flag_rule1_motionSensor.motion_1)->(motionSensor.motion = inactive)) & ((original_flag_rule1_state.newEvent_0)->(state.newEvent = FALSE)) & ((original_flag_rule1_state.newEvent_1)->(state.newEvent = TRUE)):off;
             motionSensor.motion=active&motionSensor.motion!=motionSensor.motion_last & ((original_flag_rule2_state.newEvent_0)->(state.newEvent = FALSE)) & ((original_flag_rule2_state.newEvent_1)->(state.newEvent = TRUE)) & ((original_flag_rule2_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule2_presenceSensor.presence_1)->(presenceSensor.presence = present)):off;
             state.newEvent=TRUE&state.newEvent!=state.newEvent_last & ((original_flag_rule3_motionSensor.motion_0)->(motionSensor.motion = active)) & ((original_flag_rule3_motionSensor.motion_1)->(motionSensor.motion = inactive)) & ((original_flag_rule3_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule3_presenceSensor.presence_1)->(presenceSensor.presence = present)):on;
             TRUE:light.switch;
          esac;
