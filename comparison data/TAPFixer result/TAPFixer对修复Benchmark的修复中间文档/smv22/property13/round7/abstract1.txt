MODULE RUNIN(delay)
VAR
  timer:0..20;
ASSIGN
  init(timer):=0;
  next(timer):=
      case
        delay=0:0;
        timer=0 & delay>0: delay;
        timer>0 & delay>0: timer - 1;
        TRUE: timer;
      esac;

MODULE main
   VAR
     ovenMode.ovenMode:{heating,on,grill,warming,off,defrosting};
     ovenMode.ovenMode_last:{heating,on,grill,warming,off,defrosting};
     presenceSensor.presence:{not_present,present};
     presenceSensor.presence_last:{not_present,present};
     lock.lock:{locked,unlocked};
     lock.lock_last:{locked,unlocked};
     step:0..3;
     original_flag_rule0_presenceSensor.presence_0:boolean;
     original_flag_rule0_presenceSensor.presence_1:boolean;
     original_flag_rule1_presenceSensor.presence_0:boolean;
     original_flag_rule1_presenceSensor.presence_1:boolean;
     original_flag_rule2_presenceSensor.presence_0:boolean;
     original_flag_rule2_presenceSensor.presence_1:boolean;
   INVAR
     toint(original_flag_rule0_presenceSensor.presence_0) + toint(original_flag_rule0_presenceSensor.presence_1) < 2
   INVAR
     toint(original_flag_rule1_presenceSensor.presence_0) + toint(original_flag_rule1_presenceSensor.presence_1) < 2
   INVAR
     toint(original_flag_rule2_presenceSensor.presence_0) + toint(original_flag_rule2_presenceSensor.presence_1) < 2

   INVAR
     !(original_flag_rule2_presenceSensor.presence_0 = FALSE & original_flag_rule2_presenceSensor.presence_1 = TRUE )
   ASSIGN
    init(step) := 1;
    next(step) :=
        case
            step < 3 & step > 0: step + 1;
            step = 3: 0;
            TRUE: step;
    esac;


     init(presenceSensor.presence):=present;
     next(presenceSensor.presence):=
       case
         next(step) = 2: not_present;
         next(step) = 3: not_present;
         TRUE: {not_present,present};
       esac;

      init(ovenMode.ovenMode_last):=heating;
      init(presenceSensor.presence_last):=present;

      next(ovenMode.ovenMode_last):=ovenMode.ovenMode;
      next(presenceSensor.presence_last):=presenceSensor.presence;
      next(lock.lock_last):=lock.lock;
      next(original_flag_rule0_presenceSensor.presence_0) := original_flag_rule0_presenceSensor.presence_0; 

      next(original_flag_rule0_presenceSensor.presence_1) := original_flag_rule0_presenceSensor.presence_1; 

      next(original_flag_rule1_presenceSensor.presence_0) := original_flag_rule1_presenceSensor.presence_0; 

      next(original_flag_rule1_presenceSensor.presence_1) := original_flag_rule1_presenceSensor.presence_1; 

      next(original_flag_rule2_presenceSensor.presence_0) := original_flag_rule2_presenceSensor.presence_0; 

      next(original_flag_rule2_presenceSensor.presence_1) := original_flag_rule2_presenceSensor.presence_1; 

    init(ovenMode.ovenMode):=on;
    next(ovenMode.ovenMode):=
          case
             lock.lock=locked&lock.lock!=lock.lock_last & ((original_flag_rule0_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule0_presenceSensor.presence_1)->(presenceSensor.presence = present)):off;
             lock.lock=locked&lock.lock!=lock.lock_last & ((original_flag_rule1_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule1_presenceSensor.presence_1)->(presenceSensor.presence = present)):off;
             lock.lock=unlocked&lock.lock!=lock.lock_last & ((original_flag_rule2_presenceSensor.presence_0)->(presenceSensor.presence = not_present)) & ((original_flag_rule2_presenceSensor.presence_1)->(presenceSensor.presence = present)):off;
             lock.lock=unlocked&lock.lock!=lock.lock_last&presenceSensor.presence=present:off;
             TRUE:ovenMode.ovenMode;
          esac;
    init(lock.lock):=unlocked;
    next(lock.lock):=
          case
             presenceSensor.presence=present&presenceSensor.presence!=presenceSensor.presence_last:unlocked;
             TRUE:lock.lock;
          esac;
