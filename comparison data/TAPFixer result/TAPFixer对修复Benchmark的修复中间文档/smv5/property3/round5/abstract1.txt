MODULE RUNIN(delay)
VAR
  timer:0..20;
ASSIGN
  init(timer):=0;
  next(timer):=
      case
        delay=0:0;
        timer=0 & delay>0: delay;
        timer>0 & delay>0: timer - 1;
        TRUE: timer;
      esac;

MODULE main
   VAR
     doorControl.door:{closed,open};
     doorControl.door_last:{closed,open};
     presenceSensor.presence:{not_present,present};
     presenceSensor.presence_last:{not_present,present};
     hubConnection.connection:boolean;
     hubConnection.connection_last:boolean;
     ignition.switch:{on,off};
     ignition.switch_last:{on,off};
     step:0..4;
     new_rule0_ignition.switch_triggerflag:boolean;
     new_rule0_ignition.switch_valueflag0:boolean;
     new_rule0_ignition.switch_valueflag1:boolean;
     new_rule0_presenceSensor.presence_triggerflag:boolean;
     new_rule0_presenceSensor.presence_valueflag0:boolean;
     new_rule0_presenceSensor.presence_valueflag1:boolean;
     new_rule0_hubConnection.connection_triggerflag:boolean;
     new_rule0_hubConnection.connection_valueflag0:boolean;
     new_rule0_hubConnection.connection_valueflag1:boolean;
   INVAR
      toint(new_rule0_ignition.switch_valueflag0) + toint(new_rule0_ignition.switch_valueflag1) < 2 
   INVAR
      toint(new_rule0_presenceSensor.presence_valueflag0) + toint(new_rule0_presenceSensor.presence_valueflag1) < 2 
   INVAR
      toint(new_rule0_hubConnection.connection_valueflag0) + toint(new_rule0_hubConnection.connection_valueflag1) < 2 
   INVAR
      toint(new_rule0_ignition.switch_triggerflag) + toint(new_rule0_presenceSensor.presence_triggerflag) + toint(new_rule0_hubConnection.connection_triggerflag) = 1
   INVAR
     !( new_rule0_ignition.switch_triggerflag=FALSE  &  new_rule0_ignition.switch_valueflag0=FALSE  &  new_rule0_ignition.switch_valueflag1=FALSE  &  new_rule0_presenceSensor.presence_triggerflag=FALSE  &  new_rule0_presenceSensor.presence_valueflag0=FALSE  &  new_rule0_presenceSensor.presence_valueflag1=FALSE  &  new_rule0_hubConnection.connection_triggerflag=TRUE  &  new_rule0_hubConnection.connection_valueflag0=TRUE  &  new_rule0_hubConnection.connection_valueflag1=FALSE ) 
   INVAR
     !( new_rule0_ignition.switch_triggerflag=TRUE  &  new_rule0_ignition.switch_valueflag0=FALSE  &  new_rule0_ignition.switch_valueflag1=TRUE  &  new_rule0_presenceSensor.presence_triggerflag=FALSE  &  new_rule0_presenceSensor.presence_valueflag0=FALSE  &  new_rule0_presenceSensor.presence_valueflag1=FALSE  &  new_rule0_hubConnection.connection_triggerflag=FALSE  &  new_rule0_hubConnection.connection_valueflag0=TRUE  &  new_rule0_hubConnection.connection_valueflag1=FALSE ) 
   INVAR
     !( new_rule0_ignition.switch_triggerflag=TRUE  &  new_rule0_ignition.switch_valueflag0=FALSE  &  new_rule0_ignition.switch_valueflag1=TRUE  &  new_rule0_presenceSensor.presence_triggerflag=FALSE  &  new_rule0_presenceSensor.presence_valueflag0=FALSE  &  new_rule0_presenceSensor.presence_valueflag1=FALSE  &  new_rule0_hubConnection.connection_triggerflag=FALSE  &  new_rule0_hubConnection.connection_valueflag0=TRUE  &  new_rule0_hubConnection.connection_valueflag1=FALSE ) 
   INVAR
     !( new_rule0_ignition.switch_triggerflag=FALSE  &  new_rule0_ignition.switch_valueflag0=FALSE  &  new_rule0_ignition.switch_valueflag1=FALSE  &  new_rule0_presenceSensor.presence_triggerflag=TRUE  &  new_rule0_presenceSensor.presence_valueflag0=TRUE  &  new_rule0_presenceSensor.presence_valueflag1=FALSE  &  new_rule0_hubConnection.connection_triggerflag=FALSE  &  new_rule0_hubConnection.connection_valueflag0=FALSE  &  new_rule0_hubConnection.connection_valueflag1=FALSE ) 
   ASSIGN
    init(step) := 1;
    next(step) :=
        case
            step < 4 & step > 0: step + 1;
            step = 4: 0;
            TRUE: step;
    esac;


     init(presenceSensor.presence):=present;
     next(presenceSensor.presence):=
       case
         next(step) = 2: present;
         next(step) = 3: not_present;
         next(step) = 4: not_present;
         TRUE: {not_present,present};
       esac;

         init(ignition.switch) := on;
         init(hubConnection.connection) := TRUE;
      init(doorControl.door_last):=open;
      init(presenceSensor.presence_last):=present;

      next(doorControl.door_last):=doorControl.door;
      next(presenceSensor.presence_last):=presenceSensor.presence;
      next(hubConnection.connection_last):=hubConnection.connection;
      next(ignition.switch_last):=ignition.switch;

     next(ignition.switch):=
       case
         next(step) = 2: on;
         next(step) = 3: off;
         next(step) = 4: on;
         TRUE: ignition.switch;
       esac;


     next(hubConnection.connection):=
       case
         next(step) = 2: FALSE;
         next(step) = 3: FALSE;
         next(step) = 4: FALSE;
         TRUE: hubConnection.connection;
       esac;


      next(new_rule0_ignition.switch_triggerflag) :=
          case
            (next(new_rule0_ignition.switch_valueflag0) | next(new_rule0_ignition.switch_valueflag1))=FALSE: FALSE;
            TRUE: new_rule0_ignition.switch_triggerflag;
         esac;
      next(new_rule0_ignition.switch_valueflag0) := new_rule0_ignition.switch_valueflag0;
      next(new_rule0_ignition.switch_valueflag1) := new_rule0_ignition.switch_valueflag1;
      next(new_rule0_presenceSensor.presence_triggerflag) :=
          case
            (next(new_rule0_presenceSensor.presence_valueflag0) | next(new_rule0_presenceSensor.presence_valueflag1))=FALSE: FALSE;
            TRUE: new_rule0_presenceSensor.presence_triggerflag;
         esac;
      next(new_rule0_presenceSensor.presence_valueflag0) := new_rule0_presenceSensor.presence_valueflag0;
      next(new_rule0_presenceSensor.presence_valueflag1) := new_rule0_presenceSensor.presence_valueflag1;
      next(new_rule0_hubConnection.connection_triggerflag) :=
          case
            (next(new_rule0_hubConnection.connection_valueflag0) | next(new_rule0_hubConnection.connection_valueflag1))=FALSE: FALSE;
            TRUE: new_rule0_hubConnection.connection_triggerflag;
         esac;
      next(new_rule0_hubConnection.connection_valueflag0) := new_rule0_hubConnection.connection_valueflag0;
      next(new_rule0_hubConnection.connection_valueflag1) := new_rule0_hubConnection.connection_valueflag1;

    init(doorControl.door):=open;
    next(doorControl.door):=
          case
             hubConnection.connection=FALSE&hubConnection.connection!=hubConnection.connection_last:closed;
             ignition.switch=off&ignition.switch!=ignition.switch_last&hubConnection.connection = FALSE:open;
             ignition.switch=off&ignition.switch!=ignition.switch_last&hubConnection.connection = FALSE:open;
             presenceSensor.presence=not_present&presenceSensor.presence!=presenceSensor.presence_last:closed;
             (((new_rule0_ignition.switch_valueflag0|new_rule0_ignition.switch_valueflag1) & (new_rule0_ignition.switch_triggerflag))->(ignition.switch != ignition.switch_last)) & ((new_rule0_ignition.switch_valueflag0)->(ignition.switch = on))&((new_rule0_ignition.switch_valueflag1)->(ignition.switch = off)) & (((new_rule0_presenceSensor.presence_valueflag0|new_rule0_presenceSensor.presence_valueflag1) & (new_rule0_presenceSensor.presence_triggerflag))->(presenceSensor.presence != presenceSensor.presence_last)) & ((new_rule0_presenceSensor.presence_valueflag0)->(presenceSensor.presence = not_present))&((new_rule0_presenceSensor.presence_valueflag1)->(presenceSensor.presence = present)) & (((new_rule0_hubConnection.connection_valueflag0|new_rule0_hubConnection.connection_valueflag1) & (new_rule0_hubConnection.connection_triggerflag))->(hubConnection.connection != hubConnection.connection_last)) & ((new_rule0_hubConnection.connection_valueflag0)->(hubConnection.connection = FALSE))&((new_rule0_hubConnection.connection_valueflag1)->(hubConnection.connection = TRUE)):closed;
             TRUE:doorControl.door;
          esac;
